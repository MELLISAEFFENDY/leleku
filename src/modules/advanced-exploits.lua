--[[
    Advanced Fishing Exploits
    Berdasarkan analisis remote events dan game mechanics
]]--

local AdvancedExploits = {}

-- Services
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local Players = game:GetService('Players')
local RunService = game:GetService('RunService')

local LocalPlayer = Players.LocalPlayer

-- Exploit Functions
function AdvancedExploits.CreateAdvancedExploits(tab, flags)
    tab:Section('🎯 Advanced Fishing Exploits')
    
    -- Skip Shake Mini-Game
    tab:Toggle('Skip Shake Mini-Game', {
        flag = 'skipshake',
        location = flags,
        default = false,
        callback = function(value)
            print("Skip Shake: " .. (value and "Enabled" or "Disabled"))
        end
    })
    
    -- Instant Fish Bite
    tab:Toggle('Instant Fish Bite', {
        flag = 'instantbite',
        location = flags,
        default = false,
        callback = function(value)
            print("Instant Bite: " .. (value and "Enabled" or "Disabled"))
        end
    })
    
    -- Force Legendary Fish
    tab:Toggle('Force Legendary Fish', {
        flag = 'forcelegendary',
        location = flags,
        default = false,
        callback = function(value)
            print("Force Legendary: " .. (value and "Enabled" or "Disabled"))
        end
    })
    
    -- No Wait Time
    tab:Toggle('No Wait Time', {
        flag = 'nowaittime',
        location = flags,
        default = false,
        callback = function(value)
            print("No Wait Time: " .. (value and "Enabled" or "Disabled"))
        end
    })
    
    tab:Section('🔧 Experimental Exploits')
    
    -- Duplicate Fish Catch
    tab:Button('Duplicate Last Fish', function()
        AdvancedExploits.DuplicateFish()
    end)
    
    -- Force Rare Events
    tab:Button('Trigger Rare Event', function()
        AdvancedExploits.TriggerRareEvent()
    end)
    
    -- Manipulate Weather
    tab:Button('Force Perfect Weather', function()
        AdvancedExploits.ForcePerfectWeather()
    end)
    
    -- Start advanced automation
    AdvancedExploits.StartAdvancedAutomation(flags)
end

-- Advanced Automation Loop
function AdvancedExploits.StartAdvancedAutomation(flags)
    RunService.Heartbeat:Connect(function()
        pcall(function()
            local character = LocalPlayer.Character
            if not character then return end
            
            local rod = character:FindFirstChildOfClass("Tool")
            if not rod or not rod:FindFirstChild("values") then return end
            
            -- Skip Shake Implementation
            if flags.skipshake then
                local playerGui = LocalPlayer:WaitForChild("PlayerGui")
                local shakeUI = playerGui:FindFirstChild("shakeui")
                
                if shakeUI then
                    -- Method 1: Instant complete
                    pcall(function()
                        if ReplicatedStorage.events:FindFirstChild("shakecomplete") then
                            ReplicatedStorage.events.shakecomplete:FireServer(true)
                        end
                        shakeUI:Destroy()
                    end)
                end
            end
            
            -- Instant Fish Bite Implementation
            if flags.instantbite then
                if rod.values.lure.Value > 0.001 and rod.values.lure.Value < 100 then
                    -- Method 1: Direct manipulation
                    rod.values.lure.Value = 100
                    
                    -- Method 2: Force fish bite event
                    pcall(function()
                        if ReplicatedStorage.events:FindFirstChild("fishbite") then
                            ReplicatedStorage.events.fishbite:FireServer(true)
                        end
                    end)
                end
            end
            
            -- No Wait Time Implementation
            if flags.nowaittime then
                -- Manipulate time-based values
                if rod.values.lure.Value <= 0.001 then
                    task.spawn(function()
                        task.wait(0.001) -- Minimal delay
                        rod.events.cast:FireServer(100, 1)
                    end)
                end
            end
        end)
    end)
end

-- Hook-based Exploits
function AdvancedExploits.SetupHooks(flags)
    if not hookmetamethod then
        warn("hookmetamethod not available")
        return
    end
    
    local oldNamecall
    oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
        local method = getnamecallmethod()
        local args = {...}
        
        -- Skip shake hook
        if method == "FireServer" and tostring(self) == "shakestart" and flags.skipshake then
            -- Block original shake and immediately complete
            task.spawn(function()
                if ReplicatedStorage.events:FindFirstChild("shakecomplete") then
                    ReplicatedStorage.events.shakecomplete:FireServer(true)
                end
            end)
            return -- Block original call
        end
        
        -- Instant bite hook
        if method == "FireServer" and tostring(self) == "cast" and flags.instantbite then
            local result = oldNamecall(self, unpack(args))
            -- Immediately trigger fish bite
            task.spawn(function()
                task.wait(0.001)
                if ReplicatedStorage.events:FindFirstChild("fishbite") then
                    ReplicatedStorage.events.fishbite:FireServer(true)
                end
            end)
            return result
        end
        
        -- Force legendary hook
        if method == "FireServer" and tostring(self) == "reelfinished" and flags.forcelegendary then
            args[1] = 100 -- Perfect power
            args[2] = true -- Success
            -- Try to manipulate fish type/rarity
            if args[3] then
                args[3] = "Legendary"
            end
            return oldNamecall(self, unpack(args))
        end
        
        return oldNamecall(self, ...)
    end)
end

-- Utility Functions
function AdvancedExploits.DuplicateFish()
    pcall(function()
        local rod = LocalPlayer.Character:FindFirstChildOfClass("Tool")
        if rod then
            -- Try to duplicate last catch
            for i = 1, 5 do
                ReplicatedStorage.events.reelfinished:FireServer(100, true)
                task.wait(0.1)
            end
        end
    end)
end

function AdvancedExploits.TriggerRareEvent()
    pcall(function()
        -- Try to trigger rare events like meteors, etc.
        local events = {
            "meteor", "rarefish", "treasure", "event",
            "specialcatch", "bonus", "multiplier"
        }
        
        for _, eventName in ipairs(events) do
            if ReplicatedStorage.events:FindFirstChild(eventName) then
                ReplicatedStorage.events[eventName]:FireServer(true)
            end
        end
    end)
end

function AdvancedExploits.ForcePerfectWeather()
    pcall(function()
        -- Try to manipulate weather for better fishing
        if ReplicatedStorage.events:FindFirstChild("weather") then
            ReplicatedStorage.events.weather:FireServer("Perfect")
        end
        
        -- Alternative: Manipulate lighting/atmosphere
        local lighting = game:GetService("Lighting")
        lighting.Brightness = 2
        lighting.Ambient = Color3.fromRGB(255, 255, 255)
    end)
end

-- Remote Event Discovery
function AdvancedExploits.DiscoverRemoteEvents()
    print("🔍 Discovering Remote Events...")
    
    local remotes = {}
    
    -- Scan ReplicatedStorage for events
    for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
        if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
            table.insert(remotes, {
                Name = obj.Name,
                Type = obj.ClassName,
                Path = obj:GetFullName()
            })
        end
    end
    
    -- Print discovered remotes
    print("📡 Found " .. #remotes .. " Remote Events/Functions:")
    for _, remote in ipairs(remotes) do
        print("  • " .. remote.Type .. ": " .. remote.Name .. " (" .. remote.Path .. ")")
    end
    
    return remotes
end

-- Monitor Remote Calls
function AdvancedExploits.MonitorRemoteCalls()
    if not hookmetamethod then return end
    
    local oldNamecall
    oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
        local method = getnamecallmethod()
        local args = {...}
        
        if method == "FireServer" or method == "InvokeServer" then
            print("🚀 Remote Call: " .. tostring(self) .. " | Args: " .. table.concat(args, ", "))
        end
        
        return oldNamecall(self, ...)
    end)
end

return AdvancedExploits
